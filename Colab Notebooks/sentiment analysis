{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"sentiment analysis","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyP2q9W9IUIY01sElvKm5uc8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"TPU"},"cells":[{"cell_type":"code","metadata":{"id":"Xyzs_kZ5BzxJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":125},"executionInfo":{"status":"ok","timestamp":1592990118909,"user_tz":-330,"elapsed":34576,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"03786844-3ea6-4c40-8a50-c0eb1bea83a7"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"jNF1nEPhB3QC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592917069349,"user_tz":-330,"elapsed":7781,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"f3d6ae6d-9fdd-41f3-ff2c-96407680c91f"},"source":["!ls"],"execution_count":null,"outputs":[{"output_type":"stream","text":["drive  sample_data\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Js9IAB6oB3do","colab_type":"code","colab":{}},"source":["import pandas as pd\n","import pickle"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wQ4XtAd8B3sO","colab_type":"code","colab":{}},"source":["DATASET_COLUMNS = [\"target\", \"ids\", \"date\", \"flag\", \"user\", \"text\"]\n","DATASET_ENCODING = \"ISO-8859-1\"\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DO4cfdGdQboG","colab_type":"code","colab":{}},"source":["dataset_path = '/content/drive/My Drive/trainingandtestdata/training_cleaned.csv'\n","df = pd.read_csv(dataset_path, encoding =DATASET_ENCODING , names=DATASET_COLUMNS)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"33FHZmsl09a7","colab_type":"code","colab":{}},"source":["#test data fetching\n","dataset_path_test = '/content/drive/My Drive/trainingandtestdata/testdata.manual.2009.06.14.csv'\n","df_test = pd.read_csv(dataset_path_test, encoding =DATASET_ENCODING , names=DATASET_COLUMNS)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XAF9wur509wV","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592932279545,"user_tz":-330,"elapsed":1465,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"6858eee3-c364-41b3-ef51-e7ba24644351"},"source":["#test data fetching\n","print(\"Dataset size:\", len(df_test))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Dataset size: 498\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"InxmzE9GB35U","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592917246601,"user_tz":-330,"elapsed":1617,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"e780fc0a-5436-4a79-866d-8171134682f7"},"source":["print(\"Dataset size:\", len(df))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Dataset size: 1600000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-DsacDsEB4aw","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1592910444657,"user_tz":-330,"elapsed":1386,"user":{"displayName":"Akshay Kumar Chaurasia","photoUrl":"","userId":"12809313259391379905"}},"outputId":"bd9c8e23-366e-42dd-e8ce-915f5c7b0141"},"source":["df.tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>target</th>\n","      <th>ids</th>\n","      <th>date</th>\n","      <th>flag</th>\n","      <th>user</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1599995</th>\n","      <td>4</td>\n","      <td>2193601966</td>\n","      <td>Tue Jun 16 08:40:49 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>AmandaMarie1028</td>\n","      <td>Just woke up. Having no school is the best fee...</td>\n","    </tr>\n","    <tr>\n","      <th>1599996</th>\n","      <td>4</td>\n","      <td>2193601969</td>\n","      <td>Tue Jun 16 08:40:49 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>TheWDBoards</td>\n","      <td>TheWDB.com - Very cool to hear old Walt interv...</td>\n","    </tr>\n","    <tr>\n","      <th>1599997</th>\n","      <td>4</td>\n","      <td>2193601991</td>\n","      <td>Tue Jun 16 08:40:49 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>bpbabe</td>\n","      <td>Are you ready for your MoJo Makeover? Ask me f...</td>\n","    </tr>\n","    <tr>\n","      <th>1599998</th>\n","      <td>4</td>\n","      <td>2193602064</td>\n","      <td>Tue Jun 16 08:40:49 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>tinydiamondz</td>\n","      <td>Happy 38th Birthday to my boo of alll time!!! ...</td>\n","    </tr>\n","    <tr>\n","      <th>1599999</th>\n","      <td>4</td>\n","      <td>2193602129</td>\n","      <td>Tue Jun 16 08:40:50 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>RyanTrevMorris</td>\n","      <td>happy #charitytuesday @theNSPCC @SparksCharity...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         target  ...                                               text\n","1599995       4  ...  Just woke up. Having no school is the best fee...\n","1599996       4  ...  TheWDB.com - Very cool to hear old Walt interv...\n","1599997       4  ...  Are you ready for your MoJo Makeover? Ask me f...\n","1599998       4  ...  Happy 38th Birthday to my boo of alll time!!! ...\n","1599999       4  ...  happy #charitytuesday @theNSPCC @SparksCharity...\n","\n","[5 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"7KKthh9i1s0I","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1592932287046,"user_tz":-330,"elapsed":1330,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"9de975fa-624d-42d4-9f00-bd0008ab5d89"},"source":["#test data fetching\n","df_test.tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>target</th>\n","      <th>ids</th>\n","      <th>date</th>\n","      <th>flag</th>\n","      <th>user</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>493</th>\n","      <td>2</td>\n","      <td>14072</td>\n","      <td>Sun Jun 14 04:31:43 UTC 2009</td>\n","      <td>latex</td>\n","      <td>proggit</td>\n","      <td>Ask Programming: LaTeX or InDesign?: submitted...</td>\n","    </tr>\n","    <tr>\n","      <th>494</th>\n","      <td>0</td>\n","      <td>14073</td>\n","      <td>Sun Jun 14 04:32:17 UTC 2009</td>\n","      <td>latex</td>\n","      <td>sam33r</td>\n","      <td>On that note, I hate Word. I hate Pages. I hat...</td>\n","    </tr>\n","    <tr>\n","      <th>495</th>\n","      <td>4</td>\n","      <td>14074</td>\n","      <td>Sun Jun 14 04:36:34 UTC 2009</td>\n","      <td>latex</td>\n","      <td>iamtheonlyjosie</td>\n","      <td>Ahhh... back in a *real* text editing environm...</td>\n","    </tr>\n","    <tr>\n","      <th>496</th>\n","      <td>0</td>\n","      <td>14075</td>\n","      <td>Sun Jun 14 21:36:07 UTC 2009</td>\n","      <td>iran</td>\n","      <td>plutopup7</td>\n","      <td>Trouble in Iran, I see. Hmm. Iran. Iran so far...</td>\n","    </tr>\n","    <tr>\n","      <th>497</th>\n","      <td>0</td>\n","      <td>14076</td>\n","      <td>Sun Jun 14 21:36:17 UTC 2009</td>\n","      <td>iran</td>\n","      <td>captain_pete</td>\n","      <td>Reading the tweets coming out of Iran... The w...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     target  ...                                               text\n","493       2  ...  Ask Programming: LaTeX or InDesign?: submitted...\n","494       0  ...  On that note, I hate Word. I hate Pages. I hat...\n","495       4  ...  Ahhh... back in a *real* text editing environm...\n","496       0  ...  Trouble in Iran, I see. Hmm. Iran. Iran so far...\n","497       0  ...  Reading the tweets coming out of Iran... The w...\n","\n","[5 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"id":"RbTZ91My2l9Y","colab_type":"code","colab":{}},"source":["#test data fetching\n","df_filtered = df_test[df_test['target'] != 2] \n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rA8U1vBP3xVw","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1592932296998,"user_tz":-330,"elapsed":2310,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"63f5e56f-aaae-4b86-b7a6-e4b5fd79371a"},"source":["#test data fetching\n","print(df_filtered['target'].value_counts())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["4    182\n","0    177\n","Name: target, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nA2QUqrU2mN1","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"I68Vff2YB4rp","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592918993236,"user_tz":-330,"elapsed":2751,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"15b00c39-2951-417d-c1d7-bca9c9bbe12c"},"source":["import numpy as np\n","import tensorflow as tf\n","print(tf.__version__)\n","\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras import regularizers\n","from tensorflow.keras.layers import Activation, Dense, Dropout, Embedding, Flatten, MaxPooling1D, LSTM"],"execution_count":null,"outputs":[{"output_type":"stream","text":["2.2.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"p6pBun_MB46_","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ww5JYM_eB5Ie","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1592918998728,"user_tz":-330,"elapsed":2633,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"2bd6cdab-21e3-4943-db2b-e0acbfdf8dab"},"source":["import nltk\n","from nltk.corpus import stopwords\n","nltk.download('stopwords')\n","from  nltk.stem import SnowballStemmer"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"RBLfbVjMB5Sv","colab_type":"code","colab":{}},"source":["stop_words = stopwords.words(\"english\")\n","stemmer =  SnowballStemmer(\"english\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"L7T-5FSrPRno","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1592917289828,"user_tz":-330,"elapsed":3315,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"5e5ddbdd-6d30-4f72-f083-f572b77e9f01"},"source":["#using only 10% examples to check the model\n","df['target'].value_counts()\n","df = df.sample(frac=1).reset_index(drop=True)\n","df['target'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4    800000\n","0    800000\n","Name: target, dtype: int64"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"2Dsf94ZnPR1W","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_QemUwZdPSBk","colab_type":"code","colab":{}},"source":["import re\n","import string\n","\n","def strip_links(text):\n","    link_regex    = re.compile('((https?):((//)|(\\\\\\\\))+([\\w\\d:#@%/;$()~_?\\+-=\\\\\\.&](#!)?)*)', re.DOTALL)\n","    links         = re.findall(link_regex, text)\n","    for link in links:\n","        text = text.replace(link[0], ', ')    \n","    return text\n","\n","def strip_all_entities(text):\n","    entity_prefixes = ['@','#']\n","    for separator in  string.punctuation:\n","        if separator not in entity_prefixes :\n","            text = text.replace(separator,' ')\n","    words = []\n","    for word in text.split():\n","        word = word.strip()\n","        if word:\n","            if word[0] not in entity_prefixes:\n","                words.append(word)\n","    return ' '.join(words)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"mXbr4gy-PSNj","colab_type":"code","colab":{}},"source":["#preprocessing\n","\n","df.text = df.text.apply(lambda x: strip_links(x))\n","df.text = df.text.apply(lambda x: strip_all_entities(x))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"i3zKX0Ac5D6Y","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":122},"executionInfo":{"status":"ok","timestamp":1592932317021,"user_tz":-330,"elapsed":4259,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"dfd467e4-f133-4133-8755-e8f087a156c2"},"source":["#test data fetching\n","df_filtered.text = df_filtered.text.apply(lambda x: strip_links(x))\n","df_filtered.text = df_filtered.text.apply(lambda x: strip_all_entities(x))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/pandas/core/generic.py:5303: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  self[name] = value\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"1bXFkZG8PSYF","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1592910500990,"user_tz":-330,"elapsed":18005,"user":{"displayName":"Akshay Kumar Chaurasia","photoUrl":"","userId":"12809313259391379905"}},"outputId":"c325b56c-369f-4009-82e0-cd20f1deb664"},"source":["df.tail()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>target</th>\n","      <th>ids</th>\n","      <th>date</th>\n","      <th>flag</th>\n","      <th>user</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1599995</th>\n","      <td>4</td>\n","      <td>1983379113</td>\n","      <td>Sun May 31 13:02:38 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>bb_mke</td>\n","      <td>I feel your joy pain Congrats</td>\n","    </tr>\n","    <tr>\n","      <th>1599996</th>\n","      <td>4</td>\n","      <td>1969342806</td>\n","      <td>Fri May 29 23:44:21 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>chrisabad</td>\n","      <td>pretty good Had to leave but left the left res...</td>\n","    </tr>\n","    <tr>\n","      <th>1599997</th>\n","      <td>0</td>\n","      <td>2206598636</td>\n","      <td>Wed Jun 17 06:47:07 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>identicaupdates</td>\n","      <td>bugabundo thats the thing i have no where to e...</td>\n","    </tr>\n","    <tr>\n","      <th>1599998</th>\n","      <td>4</td>\n","      <td>2190913587</td>\n","      <td>Tue Jun 16 04:03:47 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>aery69</td>\n","      <td>at home resting</td>\n","    </tr>\n","    <tr>\n","      <th>1599999</th>\n","      <td>0</td>\n","      <td>2213455329</td>\n","      <td>Wed Jun 17 15:23:49 PDT 2009</td>\n","      <td>NO_QUERY</td>\n","      <td>AlyssaCherie</td>\n","      <td>and it s my fault</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         target  ...                                               text\n","1599995       4  ...                      I feel your joy pain Congrats\n","1599996       4  ...  pretty good Had to leave but left the left res...\n","1599997       0  ...  bugabundo thats the thing i have no where to e...\n","1599998       4  ...                                    at home resting\n","1599999       0  ...                                  and it s my fault\n","\n","[5 rows x 6 columns]"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"code","metadata":{"id":"O94gSyiJPSkP","colab_type":"code","colab":{}},"source":["df_new = df.drop(columns=['ids','date','flag','user'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"6MZixw_75og6","colab_type":"code","colab":{}},"source":["#test data fetching\n","df_t = df_filtered.drop(columns=['ids','date','flag','user'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C2AcOkGrPSuW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1592917370707,"user_tz":-330,"elapsed":1730,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"a12da309-2544-49a1-e78c-e4c5fd1b1626"},"source":["df_new['target'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["4    800000\n","0    800000\n","Name: target, dtype: int64"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"code","metadata":{"id":"JbIDPFYePS4J","colab_type":"code","colab":{}},"source":["df_new['text'] = df_new['text'].astype(str)\n","df_new['target'] = df_new['target'].astype(float)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"MLGRANMW6CfX","colab_type":"code","colab":{}},"source":["#test data fetching\n","df_t['text'] = df_t['text'].astype(str)\n","df_t['target'] = df_t['target'].astype(float)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nrOOAXrm6OGC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1592932333637,"user_tz":-330,"elapsed":1434,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"0ebb1f34-b19d-41a5-dc51-a76bc83aaecc"},"source":["#test data fetching\n","df_t.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>target</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>4.0</td>\n","      <td>I loooooooovvvvvveee my Kindle2 Not that the D...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.0</td>\n","      <td>Reading my kindle2 Love it Lee childs is good ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.0</td>\n","      <td>Ok first assesment of the it fucking rocks</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.0</td>\n","      <td>You ll love your Kindle2 I ve had mine for a f...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4.0</td>\n","      <td>Fair enough But i have the Kindle2 and I think...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   target                                               text\n","0     4.0  I loooooooovvvvvveee my Kindle2 Not that the D...\n","1     4.0  Reading my kindle2 Love it Lee childs is good ...\n","2     4.0         Ok first assesment of the it fucking rocks\n","3     4.0  You ll love your Kindle2 I ve had mine for a f...\n","4     4.0  Fair enough But i have the Kindle2 and I think..."]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"id":"pqFVPc_hPTA1","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1592917385452,"user_tz":-330,"elapsed":1469,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"8c3665f2-50dc-4b91-bf76-df2926c2699f"},"source":["df_new.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>target</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>I hate the quot sorry only for US viewers quot...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>Realized at 10 30 that I haven t done any wash...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.0</td>\n","      <td>jump on them but what would you be wearing if ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>Bored at mums work leaving school early isn t ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>I had my anniversary just a week back</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   target                                               text\n","0     0.0  I hate the quot sorry only for US viewers quot...\n","1     0.0  Realized at 10 30 that I haven t done any wash...\n","2     4.0  jump on them but what would you be wearing if ...\n","3     0.0  Bored at mums work leaving school early isn t ...\n","4     0.0              I had my anniversary just a week back"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"lwPrH5tUPTIX","colab_type":"code","colab":{}},"source":["x = df_new['text'].astype(str)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Xho78m6v6YR-","colab_type":"code","colab":{}},"source":["#test data fetching\n","x_test = df_t['text'].astype(str)\n","y_test = df_t['target'].astype(float)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HKurr-Y0PTQD","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":122},"executionInfo":{"status":"ok","timestamp":1592910522610,"user_tz":-330,"elapsed":1421,"user":{"displayName":"Akshay Kumar Chaurasia","photoUrl":"","userId":"12809313259391379905"}},"outputId":"c2a9ee13-ffcd-43a7-be08-909cd926dae9"},"source":["print(x[:5])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0    About to put these banana cookies in the oven ...\n","1    Im craving some cinnamon toast crunch Why is i...\n","2    He sits on the powerbook to heat up his ass an...\n","3    thanks Glad you like em amp are among my favou...\n","4    Have A GREAT DAY All Persue Peace Love One ano...\n","Name: text, dtype: object\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xJoGfEEoPTXE","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":122},"executionInfo":{"status":"ok","timestamp":1592910524394,"user_tz":-330,"elapsed":1428,"user":{"displayName":"Akshay Kumar Chaurasia","photoUrl":"","userId":"12809313259391379905"}},"outputId":"3f5fedd6-3bbb-46fe-eebf-a609cf26154c"},"source":["y = df_new['target'].astype(float)\n","print(y[:5])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0    4.0\n","1    0.0\n","2    4.0\n","3    4.0\n","4    4.0\n","Name: target, dtype: float64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"rnEbrmE8PTkG","colab_type":"code","colab":{}},"source":["embedding_dim = 100\n","max_length = 100\n","trunc_type='post'\n","padding_type='post'\n","oov_tok = \"<OOV>\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5qnFTuW8e6Rb","colab_type":"code","colab":{}},"source":["sentences = []"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"NO-7cXLqdB23","colab_type":"code","colab":{}},"source":["#preprocessing of data\n","def preprocess(line):\n","    line = line.lower()\n","    #stopwords removal\n","    for word in stop_words:\n","      token = \" \" + word + \" \"\n","      line = line.replace(token, \" \")\n","      line = line.replace(\"  \", \" \")\n","    #stemming   \n","    tokens = []\n","    for token in line.split():\n","      tokens.append(stemmer.stem(token))\n","    return \" \".join(tokens)\n","\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7kkVUkXyR5mY","colab_type":"code","colab":{}},"source":["df_new.text = df_new.text.apply(lambda x: preprocess(x))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_6-NNyr5TiaF","colab_type":"code","colab":{}},"source":["#saving after preprocessing\n","df_new.to_csv('/content/drive/My Drive/preprocess_text_label.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jM8LXtJEUi_h","colab_type":"code","colab":{}},"source":["df = pd.read_csv('/content/drive/My Drive/preprocess_text_label.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b1SlT-1pVIxf","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":195},"executionInfo":{"status":"ok","timestamp":1592919061852,"user_tz":-330,"elapsed":1116,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"bb8b69b8-1088-44c0-9e76-c2ce47ef2742"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>target</th>\n","      <th>text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>i hate quot sorri us viewer quot messag nbc we...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0.0</td>\n","      <td>realiz 10 30 done wash yet stay cloth work tom...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>4.0</td>\n","      <td>jump would wear jump them</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>0.0</td>\n","      <td>bore mum work leav school earli alway great lo...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0.0</td>\n","      <td>i anniversari week back</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Unnamed: 0  target                                               text\n","0           0     0.0  i hate quot sorri us viewer quot messag nbc we...\n","1           1     0.0  realiz 10 30 done wash yet stay cloth work tom...\n","2           2     4.0                          jump would wear jump them\n","3           3     0.0  bore mum work leav school earli alway great lo...\n","4           4     0.0                            i anniversari week back"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"6dSt5rBedCJJ","colab_type":"code","colab":{}},"source":["for item in x:\n","  line = preprocess(item)\n","  sentences.append(line)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"d7-s9r0i60SS","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":105},"executionInfo":{"status":"ok","timestamp":1592932393867,"user_tz":-330,"elapsed":1523,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"a792062d-dfb7-4199-da9a-a45256b95c7b"},"source":["#test data fetching\n","t_sen = []\n","for item in x_test:\n","  line = preprocess(item)\n","  t_sen.append(line)\n","\n","t_x = np.array(t_sen)\n","print(t_x.shape)\n","print(t_x[:5])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(359,)\n","['i loooooooovvvvvvee kindle2 dx cool 2 fantast right'\n"," 'read kindle2 love lee child good read' 'ok first asses fuck rock'\n"," 'you love kindle2 mine month never look back new big one huge need remors'\n"," 'fair enough kindle2 think perfect']\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Qqs81ULq60bs","colab_type":"code","colab":{}},"source":["sentence = df['text'].astype(str)\n","y = df['target'].astype(float)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"VPXuO1FPW069","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":122},"executionInfo":{"status":"ok","timestamp":1592919083003,"user_tz":-330,"elapsed":1179,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"0f528b5f-f7af-43d3-8bef-676fe42b475c"},"source":["print(sentence[:5])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0    i hate quot sorri us viewer quot messag nbc we...\n","1    realiz 10 30 done wash yet stay cloth work tom...\n","2                            jump would wear jump them\n","3    bore mum work leav school earli alway great lo...\n","4                              i anniversari week back\n","Name: text, dtype: object\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"0xt_5gmhdCkR","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592919098380,"user_tz":-330,"elapsed":1267,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"2f57d734-78f2-47dc-97f5-2075a7d6bb1f"},"source":["sentence = np.array(sentence)\n","print(sentence.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1600000,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"HUYOiHXt-upR","colab_type":"code","colab":{}},"source":["np.savetxt('preprocessed_training_data.csv', sentence, delimiter=',', fmt='%s')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_kKsDLyXdCwD","colab_type":"code","colab":{}},"source":["tokenizer= Tokenizer(oov_token=oov_tok)\n","tokenizer.fit_on_texts(sentence)\n","#word_index = tokenizer.word_index\n","#vocab_size=len(word_index)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zpBD07Qm_WF0","colab_type":"code","colab":{}},"source":["#wordindex save\n","pickle.dump( word_index, open(\"/content/drive/My Drive/wordindex.p\", \"wb\"))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5_7ndobQYjNV","colab_type":"code","colab":{}},"source":["word_index = pickle.load(open(\"/content/drive/My Drive/wordindex.p\", \"rb\"))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ux4UQr4kdC6P","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592919296306,"user_tz":-330,"elapsed":1236,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"08d8e554-2679-4815-e164-6736a23b2619"},"source":["vocab_size = len(word_index)\n","print(vocab_size)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["247382\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UZPURMdWdDDX","colab_type":"code","colab":{}},"source":["sequences = tokenizer.texts_to_sequences(sentence)\n","padded = pad_sequences(sequences, maxlen=max_length, padding = padding_type, truncating=trunc_type)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"bBKaNwR_7dCO","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592932404672,"user_tz":-330,"elapsed":1629,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"772ec10a-9c3e-411e-d659-7e87dac29b3f"},"source":["#test data fetching\n","t_seq = tokenizer.texts_to_sequences(t_x)\n","t_pad = pad_sequences(t_seq, maxlen=max_length, padding=padding_type, truncating=trunc_type)\n","print(t_seq[0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[2, 1, 62975, 8117, 140, 37, 952, 64]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5cD5n--rdDLG","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1592919431908,"user_tz":-330,"elapsed":1190,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"ae8d870c-f528-4d8c-c87d-2ce462d31f56"},"source":["print(sequences[0])\n","print(sentence[0])\n","print(word_index['fell'])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[2, 80, 10, 70, 145, 7065, 10, 532, 4342, 701, 615, 89, 2198, 207]\n","i hate quot sorri us viewer quot messag nbc websit understand show clip whi\n","708\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"_Zghoo2rdDSq","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":158},"executionInfo":{"status":"ok","timestamp":1592919439751,"user_tz":-330,"elapsed":1044,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"f55b4d1b-0cef-4e61-eaf6-8334466e41f4"},"source":["print(padded[0])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[   2   80   10   70  145 7065   10  532 4342  701  615   89 2198  207\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n","    0    0]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"P3DwZ2nhdDZh","colab_type":"code","colab":{}},"source":["split = int(0.9 * 1600000)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"p0xctEjj8lmO","colab_type":"code","colab":{}},"source":["#test data fetching\n","y_test = y_test/4.0\n","test_seq = t_pad"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"nY9D2BnZdDgB","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":914},"executionInfo":{"status":"ok","timestamp":1592919457925,"user_tz":-330,"elapsed":1227,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"49c734fd-0590-4b35-b8b6-df8664d61855"},"source":["train_sequences = padded[0:split] \n","test_sequences = padded[split:]\n","train_labels  = y[0:split] \n","test_labels = y[split:]\n","train_labels= train_labels/4.0\n","test_labels = test_labels/4.0\n","\n","print(train_labels[:50])"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0     0.0\n","1     0.0\n","2     1.0\n","3     0.0\n","4     0.0\n","5     0.0\n","6     1.0\n","7     0.0\n","8     1.0\n","9     1.0\n","10    0.0\n","11    1.0\n","12    0.0\n","13    0.0\n","14    1.0\n","15    0.0\n","16    1.0\n","17    0.0\n","18    1.0\n","19    0.0\n","20    1.0\n","21    0.0\n","22    1.0\n","23    0.0\n","24    1.0\n","25    0.0\n","26    1.0\n","27    0.0\n","28    1.0\n","29    1.0\n","30    0.0\n","31    0.0\n","32    1.0\n","33    0.0\n","34    0.0\n","35    1.0\n","36    0.0\n","37    0.0\n","38    0.0\n","39    0.0\n","40    0.0\n","41    0.0\n","42    0.0\n","43    1.0\n","44    0.0\n","45    0.0\n","46    1.0\n","47    0.0\n","48    1.0\n","49    1.0\n","Name: target, dtype: float64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"LGbPpdzgdFc3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":87},"executionInfo":{"status":"ok","timestamp":1592919464798,"user_tz":-330,"elapsed":1546,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"d2f845f9-7572-49c7-b2a3-c53b9c41e97d"},"source":["print(len(test_labels))\n","print(len(test_sequences))\n","print(len(train_labels))\n","print(len(train_sequences))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["160000\n","160000\n","1440000\n","1440000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"sIHbf0UhsbOI","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592919473110,"user_tz":-330,"elapsed":856,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"88d4fa43-7952-47d4-b57a-9de53a9d2e9b"},"source":["print(vocab_size)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["247382\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"O15TIuSFsbqZ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":210},"executionInfo":{"status":"ok","timestamp":1592919495925,"user_tz":-330,"elapsed":17872,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"0dc4e1a0-9878-4003-b5dc-382ef06ee369"},"source":["# Note this is the 100 dimension version of GloVe from Stanford\n","# I unzipped and hosted it on my site to make this notebook easier\n","!wget --no-check-certificate \\\n","    https://storage.googleapis.com/laurencemoroney-blog.appspot.com/glove.6B.100d.txt \\\n","    -O /tmp/glove.6B.100d.txt\n","embeddings_index = {};\n","with open('/tmp/glove.6B.100d.txt') as f:\n","    for line in f:\n","        values = line.split();\n","        word = values[0];\n","        coefs = np.asarray(values[1:], dtype='float32');\n","        embeddings_index[word] = coefs;\n","\n","embeddings_matrix = np.zeros((vocab_size+1, embedding_dim));\n","for word, i in word_index.items():\n","    embedding_vector = embeddings_index.get(word);\n","    if embedding_vector is not None:\n","        embeddings_matrix[i] = embedding_vector;"],"execution_count":null,"outputs":[{"output_type":"stream","text":["--2020-06-23 13:37:59--  https://storage.googleapis.com/laurencemoroney-blog.appspot.com/glove.6B.100d.txt\n","Resolving storage.googleapis.com (storage.googleapis.com)... 108.177.111.128, 2607:f8b0:4001:c07::80\n","Connecting to storage.googleapis.com (storage.googleapis.com)|108.177.111.128|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 347116733 (331M) [text/plain]\n","Saving to: ‘/tmp/glove.6B.100d.txt’\n","\n","/tmp/glove.6B.100d. 100%[===================>] 331.04M   158MB/s    in 2.1s    \n","\n","2020-06-23 13:38:01 (158 MB/s) - ‘/tmp/glove.6B.100d.txt’ saved [347116733/347116733]\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"1XennBsWsb1H","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592897709692,"user_tz":-330,"elapsed":394617,"user":{"displayName":"Akshay Kumar Chaurasia","photoUrl":"","userId":"12809313259391379905"}},"outputId":"2ec2f177-91e6-405b-aaa5-6ee20a3a9be9"},"source":["print(embeddings_matrix.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(247383, 100)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mWC3YIBvLCdP","colab_type":"code","colab":{}},"source":["embedding_layer = Embedding(vocab_size+1, embedding_dim, weights=[embeddings_matrix], input_length=max_length, trainable=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"e_gnxLiuLC8C","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZLEMv-y-LDIJ","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"s9jkPXCmsb9J","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1592932055659,"user_tz":-330,"elapsed":10840485,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"ddf47eb0-cbf6-4868-dd24-8b01fadd5655"},"source":["model = tf.keras.Sequential([\n","   tf.keras.layers. Embedding(vocab_size+1, embedding_dim, weights=[embeddings_matrix], input_length=max_length, trainable=False),\n","   tf.keras.layers.Dropout(0.3), \n","   tf.keras.layers.Conv1D(64, 5, activation='relu'),\n","   tf.keras.layers.MaxPooling1D(pool_size=4),\n","    tf.keras.layers.LSTM(124, dropout=0.2, recurrent_dropout=0.2),\n","    tf.keras.layers.Dense(1, activation='sigmoid')\n","])\n","model.compile(loss='binary_crossentropy', optimizer='adam', metrics='accuracy') \n","model.summary()\n","\n","num_epochs = 40\n","history = model.fit(train_sequences, train_labels, batch_size = 1024, epochs=num_epochs,steps_per_epoch=200, validation_data=(test_sequences, test_labels), verbose=2)\n","\n","print(\"Training Complete\")"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_2 (Embedding)      (None, 100, 100)          24738300  \n","_________________________________________________________________\n","dropout_2 (Dropout)          (None, 100, 100)          0         \n","_________________________________________________________________\n","conv1d_2 (Conv1D)            (None, 96, 64)            32064     \n","_________________________________________________________________\n","max_pooling1d_2 (MaxPooling1 (None, 24, 64)            0         \n","_________________________________________________________________\n","lstm_2 (LSTM)                (None, 124)               93744     \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 1)                 125       \n","=================================================================\n","Total params: 24,864,233\n","Trainable params: 125,933\n","Non-trainable params: 24,738,300\n","_________________________________________________________________\n","Epoch 1/40\n","200/200 - 273s - loss: 0.6442 - accuracy: 0.6203 - val_loss: 0.5905 - val_accuracy: 0.6775\n","Epoch 2/40\n","200/200 - 267s - loss: 0.6039 - accuracy: 0.6646 - val_loss: 0.5703 - val_accuracy: 0.6961\n","Epoch 3/40\n","200/200 - 269s - loss: 0.5914 - accuracy: 0.6763 - val_loss: 0.5676 - val_accuracy: 0.6980\n","Epoch 4/40\n","200/200 - 264s - loss: 0.5813 - accuracy: 0.6860 - val_loss: 0.5596 - val_accuracy: 0.7073\n","Epoch 5/40\n","200/200 - 266s - loss: 0.5767 - accuracy: 0.6897 - val_loss: 0.5561 - val_accuracy: 0.7096\n","Epoch 6/40\n","200/200 - 270s - loss: 0.5728 - accuracy: 0.6930 - val_loss: 0.5476 - val_accuracy: 0.7152\n","Epoch 7/40\n","200/200 - 267s - loss: 0.5712 - accuracy: 0.6956 - val_loss: 0.5528 - val_accuracy: 0.7122\n","Epoch 8/40\n","200/200 - 270s - loss: 0.5675 - accuracy: 0.6968 - val_loss: 0.5435 - val_accuracy: 0.7206\n","Epoch 9/40\n","200/200 - 264s - loss: 0.5630 - accuracy: 0.7024 - val_loss: 0.5408 - val_accuracy: 0.7215\n","Epoch 10/40\n","200/200 - 268s - loss: 0.5645 - accuracy: 0.7011 - val_loss: 0.5383 - val_accuracy: 0.7242\n","Epoch 11/40\n","200/200 - 267s - loss: 0.5644 - accuracy: 0.6997 - val_loss: 0.5403 - val_accuracy: 0.7217\n","Epoch 12/40\n","200/200 - 271s - loss: 0.5604 - accuracy: 0.7048 - val_loss: 0.5358 - val_accuracy: 0.7246\n","Epoch 13/40\n","200/200 - 265s - loss: 0.5611 - accuracy: 0.7040 - val_loss: 0.5387 - val_accuracy: 0.7230\n","Epoch 14/40\n","200/200 - 267s - loss: 0.5589 - accuracy: 0.7050 - val_loss: 0.5343 - val_accuracy: 0.7281\n","Epoch 15/40\n","200/200 - 269s - loss: 0.5566 - accuracy: 0.7071 - val_loss: 0.5335 - val_accuracy: 0.7265\n","Epoch 16/40\n","200/200 - 268s - loss: 0.5554 - accuracy: 0.7077 - val_loss: 0.5332 - val_accuracy: 0.7273\n","Epoch 17/40\n","200/200 - 270s - loss: 0.5556 - accuracy: 0.7084 - val_loss: 0.5321 - val_accuracy: 0.7276\n","Epoch 18/40\n","200/200 - 267s - loss: 0.5554 - accuracy: 0.7095 - val_loss: 0.5304 - val_accuracy: 0.7290\n","Epoch 19/40\n","200/200 - 274s - loss: 0.5544 - accuracy: 0.7084 - val_loss: 0.5292 - val_accuracy: 0.7305\n","Epoch 20/40\n","200/200 - 269s - loss: 0.5549 - accuracy: 0.7086 - val_loss: 0.5289 - val_accuracy: 0.7299\n","Epoch 21/40\n","200/200 - 270s - loss: 0.5536 - accuracy: 0.7109 - val_loss: 0.5288 - val_accuracy: 0.7307\n","Epoch 22/40\n","200/200 - 268s - loss: 0.5514 - accuracy: 0.7111 - val_loss: 0.5293 - val_accuracy: 0.7312\n","Epoch 23/40\n","200/200 - 267s - loss: 0.5511 - accuracy: 0.7126 - val_loss: 0.5266 - val_accuracy: 0.7314\n","Epoch 24/40\n","200/200 - 273s - loss: 0.5522 - accuracy: 0.7119 - val_loss: 0.5310 - val_accuracy: 0.7292\n","Epoch 25/40\n","200/200 - 268s - loss: 0.5503 - accuracy: 0.7119 - val_loss: 0.5279 - val_accuracy: 0.7318\n","Epoch 26/40\n","200/200 - 274s - loss: 0.5503 - accuracy: 0.7123 - val_loss: 0.5261 - val_accuracy: 0.7314\n","Epoch 27/40\n","200/200 - 269s - loss: 0.5515 - accuracy: 0.7108 - val_loss: 0.5255 - val_accuracy: 0.7323\n","Epoch 28/40\n","200/200 - 272s - loss: 0.5507 - accuracy: 0.7124 - val_loss: 0.5265 - val_accuracy: 0.7324\n","Epoch 29/40\n","200/200 - 269s - loss: 0.5475 - accuracy: 0.7154 - val_loss: 0.5251 - val_accuracy: 0.7333\n","Epoch 30/40\n","200/200 - 275s - loss: 0.5479 - accuracy: 0.7140 - val_loss: 0.5246 - val_accuracy: 0.7331\n","Epoch 31/40\n","200/200 - 271s - loss: 0.5473 - accuracy: 0.7154 - val_loss: 0.5250 - val_accuracy: 0.7331\n","Epoch 32/40\n","200/200 - 272s - loss: 0.5473 - accuracy: 0.7150 - val_loss: 0.5256 - val_accuracy: 0.7335\n","Epoch 33/40\n","200/200 - 272s - loss: 0.5478 - accuracy: 0.7155 - val_loss: 0.5251 - val_accuracy: 0.7330\n","Epoch 34/40\n","200/200 - 268s - loss: 0.5479 - accuracy: 0.7141 - val_loss: 0.5258 - val_accuracy: 0.7310\n","Epoch 35/40\n","200/200 - 278s - loss: 0.5476 - accuracy: 0.7140 - val_loss: 0.5244 - val_accuracy: 0.7342\n","Epoch 36/40\n","200/200 - 271s - loss: 0.5460 - accuracy: 0.7165 - val_loss: 0.5226 - val_accuracy: 0.7347\n","Epoch 37/40\n","200/200 - 274s - loss: 0.5451 - accuracy: 0.7174 - val_loss: 0.5228 - val_accuracy: 0.7342\n","Epoch 38/40\n","200/200 - 272s - loss: 0.5452 - accuracy: 0.7168 - val_loss: 0.5244 - val_accuracy: 0.7342\n","Epoch 39/40\n","200/200 - 272s - loss: 0.5443 - accuracy: 0.7178 - val_loss: 0.5223 - val_accuracy: 0.7353\n","Epoch 40/40\n","200/200 - 269s - loss: 0.5444 - accuracy: 0.7161 - val_loss: 0.5215 - val_accuracy: 0.7350\n","Training Complete\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"uRk09zpe2yUW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1592932218534,"user_tz":-330,"elapsed":5213,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"7a837a93-a043-46b2-f1b6-105868b748d2"},"source":["model.save('/content/drive/My Drive/fullmodel7173')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/resource_variable_ops.py:1817: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n","Instructions for updating:\n","If using Keras pass *_constraint arguments to layers.\n","INFO:tensorflow:Assets written to: /content/drive/My Drive/fullmodel7173/assets\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"5KYSWikZscFY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":608},"executionInfo":{"status":"ok","timestamp":1592932065468,"user_tz":-330,"elapsed":1906,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"64b33e31-95a5-4274-9ee0-9b0ef3ba3e14"},"source":["import matplotlib.image  as mpimg\n","import matplotlib.pyplot as plt\n","\n","\n","acc=history.history['accuracy']\n","val_acc=history.history['val_accuracy']\n","loss=history.history['loss']\n","val_loss=history.history['val_loss']\n","\n","epochs=range(len(acc))\n","plt.plot(epochs, acc, 'r')\n","plt.plot(epochs, val_acc, 'b')\n","plt.title('Training and validation accuracy')\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Accuracy\")\n","plt.legend([\"Accuracy\", \"Validation Accuracy\"])\n","\n","plt.figure()\n","\n","\n","plt.plot(epochs, loss, 'r')\n","plt.plot(epochs, val_loss, 'b')\n","plt.title('Training and validation loss')\n","plt.xlabel(\"Epochs\")\n","plt.ylabel(\"Loss\")\n","plt.legend([\"Loss\", \"Validation Loss\"])\n","\n","plt.figure()\n","\n"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]},"execution_count":30},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAYgAAAEWCAYAAAB8LwAVAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3deXhU9fX48fch7LIEZBEJBFBQUfYAIgLiVhYLbkWoVnGttmrRasX6VSyWnxutFkWtC+COaymuYBEBdwJlR5C1BAHDDiJLyPn9ce6QIUwWkpnMJDmv57nPzNy5986ZgcyZzy6qinPOOZdbhXgH4JxzLjF5gnDOOReRJwjnnHMReYJwzjkXkScI55xzEXmCcM45F5EnCFciROQjEbkq2sfGk4isEZFzY3BdFZETg/vPiMi9hTm2CK9zuYhMLWqc+Vz3LBHJiPZ1XcmrGO8AXOISkd1hD6sD+4CDwePfquqrhb2WqvaNxbFlnareGI3riEgzYDVQSVWzgmu/ChT639CVP54gXJ5UtUbovoisAa5T1f/kPk5EKoa+dJxzZYdXMbmjFqpCEJG7RGQjMF5E6ojI+yKSKSLbgvspYed8JiLXBfeHisjnIjI6OHa1iPQt4rHNRWSmiOwSkf+IyFgReSWPuAsT4wMi8kVwvakiUi/s+d+IyFoR2SIi9+Tz+XQVkY0ikhS27yIRWRDc7yIiX4nIdhHZICJPikjlPK41QUT+Gvb4zuCcH0TkmlzH9heR/4rIThFZJyL3hz09M7jdLiK7RaRb6LMNO/8MEZktIjuC2zMK+9nkR0ROCc7fLiKLRWRA2HP9RGRJcM31InJHsL9e8O+zXUS2isgsEfHvqxLmH7grquOAukAqcAP2f2l88Lgp8DPwZD7ndwWWAfWAR4AXRESKcOxrwLfAscD9wG/yec3CxPhr4GqgAVAZCH1htQaeDq5/fPB6KUSgqt8APwFn57rua8H9g8BtwfvpBpwD/C6fuAli6BPEcx7QEsjd/vETcCWQDPQHbhKRC4Pnega3yapaQ1W/ynXtusAHwJjgvf0d+EBEjs31Ho74bAqIuRLwHjA1OO8W4FUROSk45AWsurImcBrwabD/j0AGUB9oCPwZ8HmBSpgnCFdU2cAIVd2nqj+r6hZVfUdV96jqLmAU0Cuf89eq6nOqehB4EWiEfREU+lgRaQp0Bu5T1f2q+jkwOa8XLGSM41V1uar+DLwJtA/2Xwq8r6ozVXUfcG/wGeTldWAIgIjUBPoF+1DVOar6tapmqeoa4J8R4ohkUBDfIlX9CUuI4e/vM1VdqKrZqrogeL3CXBcsoXyvqi8Hcb0OfAf8MuyYvD6b/JwO1AAeCv6NPgXeJ/hsgANAaxGpparbVHVu2P5GQKqqHlDVWeoTx5U4TxCuqDJVdW/ogYhUF5F/BlUwO7EqjeTwapZcNobuqOqe4G6Nozz2eGBr2D6AdXkFXMgYN4bd3xMW0/Hh1w6+oLfk9VpYaeFiEakCXAzMVdW1QRytguqTjUEc/w8rTRTksBiAtbneX1cRmR5Uoe0AbizkdUPXXptr31qgcdjjvD6bAmNW1fBkGn7dS7DkuVZEZohIt2D/o8AKYKqIrBKR4YV7Gy6aPEG4osr9a+6PwElAV1WtRU6VRl7VRtGwAagrItXD9jXJ5/jixLgh/NrBax6b18GqugT7IuzL4dVLYFVV3wEtgzj+XJQYsGqycK9hJagmqlobeCbsugX9+v4Bq3oL1xRYX4i4Crpuk1ztB4euq6qzVXUgVv00CSuZoKq7VPWPqtoCGADcLiLnFDMWd5Q8QbhoqYnV6W8P6rNHxPoFg1/k6cD9IlI5+PX5y3xOKU6MbwMXiMiZQYPySAr++3kN+AOWiN7KFcdOYLeInAzcVMgY3gSGikjrIEHljr8mVqLaKyJdsMQUkolVibXI49ofAq1E5NciUlFELgNaY9VBxfENVtr4k4hUEpGzsH+jicG/2eUiUltVD2CfSTaAiFwgIicGbU07sHab/Kr0XAx4gnDR8jhQDdgMfA18XEKveznW0LsF+CvwBjZeI5Iix6iqi4HfY1/6G4BtWCNqfkJtAJ+q6uaw/XdgX967gOeCmAsTw0fBe/gUq375NNchvwNGisgu4D6CX+PBuXuwNpcvgp5Bp+e69hbgAqyUtQX4E3BBrriPmqruxxJCX+xzfwq4UlW/Cw75DbAmqGq7Efv3BGuE/w+wG/gKeEpVpxcnFnf0xNt9XFkiIm8A36lqzEswzpV1XoJwpZqIdBaRE0SkQtANdCBWl+2cKyYfSe1Ku+OAd7EG4wzgJlX9b3xDcq5s8Com55xzEXkVk3POuYjKTBVTvXr1tFmzZvEOwznnSpU5c+ZsVtX6kZ4rMwmiWbNmpKenxzsM55wrVUQk9wj6Q7yKyTnnXESeIJxzzkXkCcI551xEZaYNwjlXcg4cOEBGRgZ79+4t+GCXEKpWrUpKSgqVKlUq9DmeIJxzRy0jI4OaNWvSrFkz8l7nySUKVWXLli1kZGTQvHnzQp/nVUzOuaO2d+9ejj32WE8OpYSIcOyxxx51ic8ThHOuSDw5lC5F+ffyBLF9O4wcCbNnxzsS55xLKJ4gRGDECJgxI96ROOeOQo0ahVnx1BWHJ4jatW1bm+dgQuecK5c8QQCkpnqCcK4MmDdvHqeffjpt27bloosuYtu2bQCMGTOG1q1b07ZtWwYPHgzAjBkzaN++Pe3bt6dDhw7s2rUrnqEnJO/mCtC0qScI54pq2DCYNy+612zfHh5//KhPu/LKK3niiSfo1asX9913H3/5y194/PHHeeihh1i9ejVVqlRh+/btAIwePZqxY8fSvXt3du/eTdWqVaP7HsqAmJYgRKSPiCwTkRUiMjyPYwaJyBIRWSwir+V6rpaIZIjIk7GMk9RU+N//YvoSzrnY2rFjB9u3b6dXr14AXHXVVcycOROAtm3bcvnll/PKK69QsaL9Lu7evTu33347Y8aMYfv27Yf2uxwx+0REJAkYC5yHrfQ1W0Qmq+qSsGNaAncD3VV1m4g0yHWZB4CZsYrxkNRU6820cyfUqhXzl3OuTCnCL/2S9sEHHzBz5kzee+89Ro0axcKFCxk+fDj9+/fnww8/pHv37kyZMoWTTz453qEmlFiWILoAK1R1laruByZi6wWHux4Yq6rbAFT1x9ATItIJaAhMjWGMJjXVbr2ayblSq3bt2tSpU4dZs2YB8PLLL9OrVy+ys7NZt24dvXv35uGHH2bHjh3s3r2blStX0qZNG+666y46d+7Md999F+d3kHhiWaZqDKwLe5wBdM11TCsAEfkCSALuV9WPRaQC8DfgCuDcvF5ARG4AbgBo2rRp0SMNnbt2LbRpU/TrOOdKzJ49e0hJSTn0+Pbbb+fFF1/kxhtvZM+ePbRo0YLx48dz8OBBrrjiCnbs2IGqcuutt5KcnMy9997L9OnTqVChAqeeeip9+/aN47tJTPGudKsItATOAlKAmSLSBksMH6pqRn6j/1T1WeBZgLS0tKIvrh0qQXg7hHOlRnZ2dsT9X3/99RH7Pv/88yP2PfHEE1GPqayJZYJYDzQJe5wS7AuXAXyjqgeA1SKyHEsY3YAeIvI7oAZQWUR2q2rEhu5ia9gQKlf2KibnnAsTyzaI2UBLEWkuIpWBwcDkXMdMwkoPiEg9rMpplaperqpNVbUZcAfwUsySA0CFCtCkiScI55wLE7MEoapZwM3AFGAp8KaqLhaRkSIyIDhsCrBFRJYA04E7VXVLrGLKlw+Wc865w8S0DUJVPwQ+zLXvvrD7CtwebHldYwIwITYRhklNhSlTYv4yzjlXWvhUGyGpqbBhA+zfH+9InHMuIXiCCGnaFFRh3bqCj3XOuXLAE0SID5ZzrtTo3bs3U3JVCT/++OPcdNNNeZ5z1llnkZ6eDkC/fv0OzckU7v7772f06NH5vvakSZNYsuTQhBDcd999/Oc//zma8CP67LPPuOCCC4p9nWjyBBHiYyGcKzWGDBnCxIkTD9s3ceJEhgwZUqjzP/zwQ5KTk4v02rkTxMiRIzn33DzH85ZqniBCUlJs8SAvQTiX8C699FI++OAD9gdthmvWrOGHH36gR48e3HTTTaSlpXHqqacyYsSIiOc3a9aMzZs3AzBq1ChatWrFmWeeybJlyw4d89xzz9G5c2fatWvHJZdcwp49e/jyyy+ZPHkyd955J+3bt2flypUMHTqUt99+G4Bp06bRoUMH2rRpwzXXXMO+ffsOvd6IESPo2LEjbdq0OappPV5//XXatGnDaaedxl133QXAwYMHGTp0KKeddhpt2rThscceAyJPa14c8R5JnTiqVIHjjvME4dxRisds33Xr1qVLly589NFHDBw4kIkTJzJo0CBEhFGjRlG3bl0OHjzIOeecw4IFC2jbtm3E68yZM4eJEycyb948srKy6NixI506dQLg4osv5vrrrwfg//7v/3jhhRe45ZZbGDBgABdccAGXXnrpYdfau3cvQ4cOZdq0abRq1Yorr7ySp59+mmHDhgFQr1495s6dy1NPPcXo0aN5/vnnC/wcfvjhB+666y7mzJlDnTp1OP/885k0aRJNmjRh/fr1LFq0COBQdVmkac2Lw0sQ4XwshHOlRng1U3j10ptvvknHjh3p0KEDixcvPqw6KLdZs2Zx0UUXUb16dWrVqsWAAQMOPbdo0SJ69OhBmzZtePXVV1m8eHG+8SxbtozmzZvTqlUr4PDpxsESDkCnTp1Ys2ZNod7j7NmzOeuss6hfvz4VK1bk8ssvZ+bMmbRo0YJVq1Zxyy238PHHH1MrmIU60rTmxeEliHCpqTBnTryjcK5Uidds3wMHDuS2225j7ty57Nmzh06dOrF69WpGjx7N7NmzqVOnDkOHDmXv3r1Fuv7QoUOZNGkS7dq1Y8KECXz22WfFirdKlSoAJCUlkZWVVaxr1alTh/nz5zNlyhSeeeYZ3nzzTcaNGxdxWvPiJAovQYQLLRyUxyRgzrnEUaNGDXr37s0111xzqPSwc+dOjjnmGGrXrs2mTZv46KOP8r1Gz549mTRpEj///DO7du3ivffeO/Tcrl27aNSoEQcOHODVV189tL9mzZoRlyc96aSTWLNmDStWrAByphsvji5dujBjxgw2b97MwYMHef311+nVqxebN28mOzubSy65hL/+9a/MnTs3z2nNi8NLEOGaNrWBcps2QaNG8Y7GOVeAIUOGcNFFFx2qamrXrh0dOnTg5JNPpkmTJnTv3j3f8zt27Mhll11Gu3btaNCgAZ07dz703AMPPEDXrl2pX78+Xbt2PZQUBg8ezPXXX8+YMWMONU4DVK1alfHjx/OrX/2KrKwsOnfuzI033nhU72fatGmHTWH+1ltv8dBDD9G7d29Ulf79+zNw4EDmz5/P1VdffWhG2wcffDDPac2LQ2y2i9IvLS1NQ32ci+z99+GXv4SvvoLTT49OYM6VQUuXLuWUU06JdxjuKEX6dxOROaqaFul4r2IK52MhnHPuEE8Q4cJXlnPOuXLOE0S42rVt8wThXIHKSvV0eVGUfy9PELn5WAjnClS1alW2bNniSaKUUFW2bNlC1apVj+o878WUmycI5wqUkpJCRkYGmZmZ8Q7FFVLVqlUP6yFVGJ4gcmvaFMJGPzrnjlSpUiWaN28e7zBcjHkVU26pqbBjh23OOVeOeYLIzdeFcM45wBPEkXwshHPOAZ4gjuRjIZxzDvAEcaSGDaFyZU8QzrlyzxNEbhUqWCnCE4RzrpyLaYIQkT4iskxEVojI8DyOGSQiS0RksYi8FuxrLyJfBfsWiMhlsYzzCKFpv51zrhyL2TgIEUkCxgLnARnAbBGZrKpLwo5pCdwNdFfVbSLSIHhqD3Clqn4vIscDc0RkiqoWfw29wmjaFD7+uEReyjnnElUsSxBdgBWqukpV9wMTgYG5jrkeGKuq2wBU9cfgdrmqfh/c/wH4Eagfw1gPl5oKGzZAsOC4c86VR7FMEI2BdWGPM4J94VoBrUTkCxH5WkT65L6IiHQBKgMrIzx3g4iki0h6VIf8h7q6rluX/3HOOVeGxbuRuiLQEjgLGAI8JyKHlkASkUbAy8DVqnrEOqCq+qyqpqlqWv36USxg+FgI55yLaYJYDzQJe5wS7AuXAUxW1QOquhpYjiUMRKQW8AFwj6p+HcM4j+RjIZxzLqYJYjbQUkSai0hlYDAwOdcxk7DSAyJSD6tyWhUc/y/gJVV9m5LWpAmIeIJwzpVrMUsQqpoF3AxMAZYCb6rqYhEZKSIDgsOmAFtEZAkwHbhTVbcAg4CewFARmRds7WMV6xEqV4ZGjbyKyTlXrklZWfAjLS1N09PTo3fBbt2genWYNi1613TOuQQjInNUNS3Sc/FupE5cvnCQc66c8wSRl9RU6+aafUTnKeecKxc8QeQlNRX274dNm+IdiXPOxYUniLx4V1fnXDnnCSIvvrKcc66c8wSRF08QzrlyzhNEXmrVguRkHwvhnCu3PEHkxxcOcs6VY54g8uNjIZxz5ZgniPx4gnDOlWOeIPKTmgo7d8KOHfGOxDnnSpwniPz4WAjnXDnmCSI/3tXVOVeOeYLIjycI51w55gkiPw0a2NoQPhbCOVcOeYLIT4UKPhbCOVdueYIoiHd1dc6VU54gCuIJwjlXTnmCKEjTprBxI+zbF+9InHOuRHmCKEioJ9O6dfGNwznnSpgniIKcdprdzpwZ3zicc66EeYIoSKdOcPLJ8MIL8Y7EOedKlCeIgojAtdfCl1/C0qXxjsY550pMTBOEiPQRkWUiskJEhudxzCARWSIii0XktbD9V4nI98F2VSzjLNCVV0LFil6KcM6VKzFLECKSBIwF+gKtgSEi0jrXMS2Bu4HuqnoqMCzYXxcYAXQFugAjRKROrGItUIMG8Mtfwksvwf79cQvDOedKUixLEF2AFaq6SlX3AxOBgbmOuR4Yq6rbAFT1x2D/L4BPVHVr8NwnQJ8Yxlqw666DzEx4//24huGccyUllgmiMRDeNzQj2BeuFdBKRL4Qka9FpM9RnIuI3CAi6SKSnpmZGcXQI/jFL6BxY3j++di+jnPOJYh4N1JXBFoCZwFDgOdEJLmwJ6vqs6qapqpp9evXj1GIgaQkGDoUpkyBjIzYvpZzziWAWCaI9UCTsMcpwb5wGcBkVT2gqquB5VjCKMy5Je+aayA7GyZMiHckzjkXc7FMELOBliLSXEQqA4OBybmOmYSVHhCReliV0ypgCnC+iNQJGqfPD/bFV4sWcPbZMG6cJQrnnCvDYpYgVDULuBn7Yl8KvKmqi0VkpIgMCA6bAmwRkSXAdOBOVd2iqluBB7AkMxsYGeyLv2uvhdWrYfr0eEfinHMxJaoa7xiiIi0tTdPT02P/Qj//DMcfD337wmuvFXy8c84lMBGZo6ppkZ6LdyN16VOtGlx+Obz7LmzbFu9onHMuZjxBFMW119r036++Gu9InHMuZjxBFEWHDtCxo42JKCNVdM45l5sniKK69lqYPx/mzo13JM45FxOeIIrq17+GqlV9Aj/nXJnlCaKokpPhkkusJ9OePfGOxjnnos4TRHFcdx3s2AHvvBPvSJxzLuo8QRRHr15wwglezeScK5M8QQAHDsDevUU4UcRKETNmWIO1c86VIeU+Qaxda80JEycW8QK//S3UrAn/7/9FNS7nnIu3cp8gmjSxwdEzZxbxAnXqwO9+B2+9BcuWRTU255yLp3KfICpUgDPPhFmzinGR226DKlXgoYeiFpdzzsVbuU8QAD16wIoVsGFDES/QsCFcfz288orVWTnnXBngCQLo2dNui1WKuPNOa7R+5JGoxOScc/FWqAQhIseISIXgfisRGSAilWIbWsnp0AGOOaaYCaJJE7jqKuvyWuSiiHPOJY7CliBmAlVFpDEwFfgNMCFWQZW0ihWhW7diNFSH3HWX9Zn9+9+jEpdzzsVTYROEqOoe4GLgKVX9FXBq7MIqeT17wsKFsH17MS5y4okweDA8/TRsTYwF8JxzrqgKnSBEpBtwOfBBsC8pNiHFR48eNnP3F18U80J33w0//QRjxkQlLueci5fCJohhwN3Av4J1pVtga0iXGV27QqVKUahmOu00uPBCSxC7dkUlNueci4dCJQhVnaGqA1T14aCxerOq3hrj2EpUtWrQuXMxG6pD7rnHliN9+ukoXMw55+KjsL2YXhORWiJyDLAIWCIid8Y2tJLXowfMnh2F2bvT0uD8862x+uefoxKbc86VtMJWMbVW1Z3AhcBHQHOsJ1OZ0rMnZGXBN99E4WL33AObNvlMr865UquwCaJSMO7hQmCyqh4AytxizGecYWPdolLN1LOnzeHxyCOwf38ULuiccyWrsAnin8Aa4BhgpoikAjsLOklE+ojIMhFZISLDIzw/VEQyRWResF0X9twjIrJYRJaKyBgRkULGWmTJydC2bRQaqkPuuQfWrbMpOJxzrpQpbCP1GFVtrKr91KwFeud3jogkAWOBvkBrYIiItI5w6Buq2j7Yng/OPQPoDrQFTgM6A70K/a6KoWdP+OorG+9WbL/4BXTqBH/+MyxaFIULOudcySlsI3VtEfm7iKQH29+w0kR+ugArVHWVqu4HJgIDCxmXAlWBykAVoBKwqZDnFkuPHtZIPXduFC4mAi+/DElJtvpcenoULuqccyWjsFVM44BdwKBg2wmML+CcxsC6sMcZwb7cLhGRBSLytog0AVDVr7BxFhuCbYqqLi1krMXSo4fdRqUdAuCUU+xitWrB2WdH8cLOORdbhU0QJ6jqiKA0sEpV/wK0iMLrvwc0U9W2wCfAiwAiciJwCpCCJZWzRaRH7pNF5IZQqSYzMzMK4cBxx0HLllH+Hm/RAj7/HBo3tmqnjz+O4sWdcy42CpsgfhaRM0MPRKQ7UFAH//VAk7DHKcG+Q1R1i6ruCx4+D3QK7l8EfK2qu1V1N9a1tlvuF1DVZ1U1TVXT6tevX8i3UrAePSxBZGdH7ZKWHGbMgJNOggED4J13onhx55yLvsImiBuBsSKyRkTWAE8Cvy3gnNlASxFpLiKVgcHA5PADRKRR2MMBQKga6X9ALxGpGHSv7RX2XMz17GkDoZcsifKFGzSA6dNtIN2gQfDSS1F+Aeeci57C9mKar6rtsF5FbVW1A3B2AedkATcDU7Av9zeDeZxGisiA4LBbg66s84FbgaHB/reBlcBCYD4wX1XfO7q3VnShdoiodXcNl5wMU6dC7962fsRTT8XgRZxzrvhEtWjj3UTkf6raNMrxFFlaWpqmR6mXkCqkpFhJ4vXXo3LJI+3dC5ddBpMnw/33w7332gLZzjlXgkRkjqqmRXquON9IMR+4Fi8ilhxmzbJkERNVq8Lbb8OVV1qCuPRSn/3VOZdQipMgytxUG+F69ID162H16hi+SKVKMGGCTeo3eTKcfjp8/30MX9A55wov3wQhIrtEZGeEbRdwfAnFGBdRHw+RFxG47TaYMsUm9+vcGT76KMYv6pxzBcs3QahqTVWtFWGrqaoVSyrIeDj1VKhTJ0YN1ZGcc46NtG7WDPr3h4ceimH9lnPOFcxbRfNQoYJNxlqiA5+bNYMvv7TG67vvttvdu0swAOecy+EJIh89e1qTwMaNJfii1avDa6/Bo4/aYLozzrDqp6jMHuicc4XnCSIfJdYOkZsI3HGHTcmxYQP06QMNG8I118CHH/r6Es65EuEJIh8dO9oP+rjNr3feebaexL//DRdcYCWK/v1tRPZVV8F778G+fQVfxznnisATRD4qVYJu3eI8AWvVqjZ300svwY8/wgcfwEUXWbfYAQOsZPHyy3EM0DlXVnmCKECPHjB/vvVAjbsqVaBfPxg/3gL6+GNo184G291wA/xc0PyJzjlXeJ4gCnDBBdYk0Lo1/OMfCVT9X7myTR0+bZqtWPfcc1bc8YF2zrko8QRRgE6dYM4ca48YNswSxdtvJ9AQhYoVYdQoq3pat84CfuuteEflnCsDPEEUQvv2NgHrRx9BtWrwq19B9+42ZCFh9OsH//2vjfAbNAhuvdUbsJ1zxeIJopBErLfpvHnw/POwZo0liUsvhRUr4h1doGlTW5Ro2DB44glrQFmzJt5ROedKKU8QRykpCa691qr6//IXayfu0CGBvocrV4bHHrMuscuWWZXT11/HOyrnXCnkCaKIjjkG7rsPFiywpUn/8Id4R5TLxRdb40mdOnDuufDJJ/GOyDlXyniCKKYWLWDECBuW8P778Y4mlxNPtEEcLVrYADtfB9s5dxQ8QUTBsGFwyinWLpxwQxEaNbJ2idA62OPGxTsi51wp4QkiCipXtqWlV6+GBx+MdzQR1KljVUznnWcNKKNHF+68TZtg0SJry1i9GjIybN/WrTbLbMIMCnHOxYIniCg56yy4/HJ4+OEEHat2zDFWDzZoENx5pw2uyz2YQxWWLLEs17UrHHcctGkDJ59s1VRNmti+Y4+FmjVtGpCbb/aZZp0ro8r0oj8lbfRomz/v5putd5Mk2qrdlSvbVOLJyZYEtm617rDffGMTAk6alNNnt3NnG4DXsqUlgPBt/367/e47GDsWli+HN9+06zrnygxPEFF03HHwwAPWo+mdd2yMRMJJSoJnnoG6dW3Vupdfhj17bGbCs8+G22+3SQAbNy7c9c480+aB6tbNWulPOCG28TvnSoxowswZUTxpaWmanp4e7zDIyrIf35mZ9gO7Ro14R5SPZ5+14eB9+9oowNq1i3admTNthlkRePddW2nJOVcqiMgcVU2L9Jy3QURZxYrWYL1+PYwcGe9oCnDDDTBhgi1tWtTkAJYQvv0W6te3MRcTJkQrQudcHMU0QYhIHxFZJiIrRGR4hOeHikimiMwLtuvCnmsqIlNFZKmILBGRZrGMNZq6dbPOQo89BosXxzuaEnLCCfDVV9Zaf/XVMHy4jSAMUbXV8T791NotbrnFVsj74ou4heycy1/MqphEJAlYDpwHZACzgSGquiTsmKFAmqreHOH8z4BRqvqJiNQAslV1T16vlyhVTCGbN8NJJ8Fpp8FnnyVgg3WsHDhgjTBPP23TkR9/PCxdatuOHTnH1agBFSrAzp2WUe+4AwYOtDYS51yJiVcVUxdghaquUtX9wI0J3KkAABnGSURBVERgYGFOFJHWQEVV/QRAVXfnlxwSUb161gY8cya88kq8oylBlSpZCWHMGMuMH35o3WF//Wvb98knNi35zp3www/Wi2rjRrjkEutO+/TT1mjunIu7WJYgLgX6qOp1wePfAF3DSwtBCeJBIBMrbdymqutE5ELgOmA/0Bz4DzBcVQ/meo0bgBsAmjZt2mnt2rUxeS9FlZ1tM77OmwePP25V/uWmJAFw8GDhSgQHD1rj9qOPwuzZll1//3vb6tePfZzOlWOJ3Ej9HtBMVdsCnwAvBvsrAj2AO4DOQAtgaO6TVfVZVU1T1bT6CfhFUqGCDS/o2RNuvNHagrdvj3dUJaiw1UVJSbbIxjff2LQg3brZVLmpqVZdtW5dbON0zkUUywSxHmgS9jgl2HeIqm5R1dCqNs8DnYL7GcC8oHoqC5gEdIxhrDHToIEtNPTww/Cvf9nU4N98E++oEpSIZdPJk21E9+DB1iWsRQtr0F62LN4ROleuxDJBzAZaikhzEakMDAYmhx8gIo3CHg4AloadmywioWLB2cASSqkKFeBPf7KJVcHGlj366OGdfFwup5xiEwuuXAk33QSvv277Bg2ylfOcczEXswQR/PK/GZiCffG/qaqLRWSkiAwIDrtVRBaLyHzgVoJqpKCt4Q5gmogsBAR4LlaxlpTTT7fvtoEDLWH07w8//hjvqBJc06bWuL12Ldx9N0yZYguE9+1rRbKtW+MdoXNllo+kjgNVG8Q8bJhNX/Tuu1bt7gphxw7r6fTYY5ZdRaBtW+jVy8Zg9Oxpkwk65wolv0ZqTxBxtHAhXHihdeL57jvrDeoKaf9+G7392We2ffllzmIcbdtaoqhd2/bt2WO34du+fTZ5YbVqkbc6daykkpZWvFHmziU4TxAJbPp0myNv1CibgdsV0b591kX2s8+sJ9QXX9i+atWgevXDv/yrV4cqVez53IkjtGVl5Vz75JOhS5ecrW1bOz8720ZEbthgYzrCb+vXh/PPt+Mr+pyYLnF5gkhwF18MU6farNnHHx/vaMqI0P/rog482bYN0tOtlPLtt9b1bNMme65yZUsAmzYdnkhCkpOtKkwVatWyXwDnnWcJ44QTytlgGJfoPEEkuJUroXVrG2w8fny8o3ERqdqKeqFkkZlpy7k2amRZPXR73HFWV7h1q807NXWqbaFBnM2aWaK44grrzubJwsWZJ4hS4K674JFHrJYkLeI/1ZFU7XunWbOYhuaKS9UWYpo61aYa+fRT2LULOnWC226zQYKVK8c7SldOJfJIahe45x4bVDds2JErgeZl+HBo3hzeeiu2sbliErGV+X7/e1u1b+NGW7Tpp5+sJNG8ec4Kf8Vx8CDMn2+lnDLyw8/FlyeIBFGrljVUf/GFrd5ZkIceshJHlSrwf/8XuSrcJajq1eG3v7W54D/8EE491XoopKTYoMClSwv3Bb93r42+fPBB6NfPuve2b2/ribdubROARXOcSKiabd++go91ZYJXMSWQgwetemnrVuv2Wq1a5OOefhp+9ztrs7j4YlvadNw4W4bBlVILF9oX+quv2hdwUpJ94UfawNbe+PZb6+4LlhB69LB2jQMHbKDN119be8igQZaQunU7ujaPrCybaXLWLNs+/9zaXipUsOlPTjklZzv5ZLv1LsGljrdBlCIzZth4r5Ej4d57j3z+9dfh8sttFPa771oPyi5d7O922TIrUbhS7McfrQj5ww+wZcvh2+bNdpudbe0XoYTQvbvNgJvbvHnwz3/afPO7d0ObNpYoevSwXyNZWbYdOJBzf9++nKTw1Vd2Hlg1WI8e9gsmMzNnjY/ly+38kBYt4G9/swE+rlTwBFHKXHqpTfC3fDk0bpyz/4MP7O+ue3d7PlTCmDLFlpR+8kmr5nZlmKoliKNZWGnXLvtl8cwzhZvHSsSSSSgB9ehx+H/EcFlZsGqVJYvvvrPXmT/fJlp84onIicslFE8Qpczq1Tnz0r30ku2bMcOSwGmnwbRp1mYRomozTXz/vXWZrV49PnG7BKdqCWL1ait6hm+VKuXcb9nSRpIXxYED1kD2wAM2HuSpp+wXj0tYniBKoT//2doev/7a/mZ797Y2zJkzI/8omzXLZpd45BG4886Sj9e5wyxcaI1ic+ZYghg71rrpuYTjCaIU2rULWrWyv6n1620J588/tySRlz59bBzF6tWHlzCci4usLJvX/v77oWZNSxKDBuU0lKva0rNbt+a0s1SqZP/JU1KiUxRWtT+mDRus7WTfPivlRNpEoG7dnO3YY60kVcbHqHiCKKXGj7d1cho2tORw4on5H5+eDp0729/jiBElEqJzBVuyxEoT335rbRsHDlhS2Lo1//7ZdetaomjSJCdphBreVI/cDh60Rv4NGw7firvGeY0aFkvr1tZt8MILy9RSuJ4gSqnsbOv52LevtUkUxiWX2GDd1at91muXQLKy4B//sN4Vderk/EIPbaHH+/fbWIt16+w2/P7mzQW/Ts2aOVOg5N4aNLBuv5UqHblVrmwJZtu2nBJNKImFHn/xhTXyVahgjX6XXgoXXWTXLsU8QZQjixfbj7Q777RlTp0rM/butQQSqqISOXyrUCG2/bxVYcECePtt2777zl73jDMsWZx1lv2SK2V9zT1BlDO/+Q2884792CnlP26cS1xLlliieOcdSxxg3Y9btbLuhm3a5GzNm1sCS0CeIMqZlSttYOuNN1pXdOdcjK1caT22Fi7M2Vatynm+alXbsrNztoMHc+5XrGilj/btoV27nK1u3ZiH7gmiHPrtb62Re/lyn+3VubjYvdvqfBcutOqoAwesFBHakpJy7v/8MyxaZIMMQ+uOgDXMt2tnI9QPHLBeWPv3221o278fTjrJBkIWQX4Jwpe6KqPuvRdefNGm7Bg3Lt7ROFcO1ahhEyd27Xp0523aZIkifPviC2tIr1zZ2jiqVDn8/tGMrD8KniDKqJQUm9Dvscesq/nDD9tiZs65BNewoS0qdf758Y7Ep/suyx580EoQH39s1Zt33GG9+JxzrjA8QZRhVapYVdP338OVV8Lf/26D7Z544vAJOJ1zLpKYJggR6SMiy0RkhYgMj/D8UBHJFJF5wXZdrudriUiGiDwZyzjLukaN4PnnbZ62Dh3g1lutF97kyb7wmHMubzFLECKSBIwF+gKtgSEi0jrCoW+oavtgez7Xcw8AM2MVY3nTrp2Nsn7/fes4MXCgTQI4s4if8MGD0Y3POZdYYlmC6AKsUNVVqrofmAgMLOzJItIJaAhMjVF85ZKILTa0YIGtH7Fsmc0acO651lGiIKp23JVXWieNm27yROFcWRXLBNEYWBf2OCPYl9slIrJARN4WkSYAIlIB+BtwR34vICI3iEi6iKRnZmZGK+5yoVIlW1xo1Sprm1i0yNaGOf98+PLLI4/fts3aLtq0seMmTbLpxZ95xibo3Lu35N+Dcy624t1I/R7QTFXbAp8ALwb7fwd8qKoZ+Z2sqs+qapqqptUvQ7MrlqRq1eC22yxRjB5tq0127w6/+IWtRfHVVzB0qC0oduutdvxzz9mKmFOmWDfad9+Ffv2sO21hLVtm4zO89OFcAlPVmGxAN2BK2OO7gbvzOT4J2BHcfxX4H7AG2AzsBB7K7/U6deqkrvh271Z95BHVevVy5lGuUUP1hhtU58yJfM7LL6tWrKjasaPqpk35X3/HDtU//tGOB9ULL1Tdsyf678M5VzhAuubxvRqzqTZEpCKwHDgHWA/MBn6tqovDjmmkqhuC+xcBd6nq6bmuMxRIU9Wb83s9n2ojunbvhgkTrKvs4ME2i3J+PvzQJrRs3BimTrW5ycJlZ9vyqcOH25T9115rXW7vvtsmw5w8uUSmnXHO5RKXqTZUNUtEbgamYKWDcaq6WERGYhlrMnCriAwAsoCtwNBYxeOOTo0acHO+Kflw/frZWtn9+1sV1ZQp1l4BtsrdLbfAN9/A6afDe+/ZwkZgU8xccYW1a3z8MTRtGv334pwrGp+sz0XV4sXW0L1nj5VAJk+2tobjjrPpPq644shZj2fMsC63xxxj68m0bRuX0J0rl/IrQcS7kdqVMaeear2gGjSwlRlfftkWL1q2zLrGRpoSv1cvW1JVBHr0gE8/Lfm4nXNH8gThoi411b7w77vPZjp+5BGoVSv/c047zXpMNWkCffrAxIklE6tzLm8+m6uLifr14S9/ObpzmjSBWbOsumnIEFt/5eyzbQR4o0Y5K00650qGt0G4hLN3L1x99eGliHr1rG0ifLGt1FQrmcRoKnznygVfUc6VStu325Qg4eumLFp05KjtGjUsUdSubVutWpCcbFOcd+0KXbrAscfG5z04l+h8RTlXKiUn23QePXvm7MvKghUrLFn88APs2GEjuHfsyNm2b7eR4W+9lTNb7Qkn5Czu1bWrLf1bpUp83pdzpYUnCFeqVKwIJ59sW0F27YL0dPj2WxuD8dln8Npr9lyVKnDBBfCb30DfvrZ6o3PucJ4gXJlVs6ZNZ967d86+jAxLFjNmwBtvwDvvWPXTZZdZsujatXQ3hu/da6Wohg3jHYkrC7ybqytXUlLgkktgzBhLFu+/b1OdjxsH3brBSSfZMq0rVpS+xZQ2bbL30LQp/PWvvmqgKz5PEK7cqlTJpgaZOBE2boQXXrC5pEaMgJYt7Yt2yBAYO9baPBJ55tnVq226kuXL4bzzbKnZtDSrYnOuqLwXk3O5/O9/8O9/28JIs2ZZYzhY76gzzrAv4vbtbXLB5GSoU8duq1Yt+mv+9BNs2GDbzp02/qNatcKdu3ChTc++dy988IGVIiZPtsWcNm6E22+3MSnVqxc9Pld2eTdX54pIFdautZHhoW3x4sjHVq1qiSI52breVq1qjeG5bytXtp5WoYSwcaM1qIdr0sSqiSLNXRXuyy+tFFS9us2ie+qpOc/t2AF33QX//Kf14nruucPbY5wDTxDORdXWrVaVs327bdu2HXn700/2i37fPttC90O3yck2Ovy44+w2/P7+/dYOMnu2lVQefdTaSXILTbGekmLJoVmzyPF+9hlcf721q1x3nU19UqdOLD8hV5p4gnCulMnOtl5Wf/4zrFlj81M98kjOFOqvvmor/bVpY9OkN2iQ//V+/hnuv99WDaxa1RLLNdfYGJPS3GvLFZ8nCOdKqX374Mknrbpp505LCieeaInjrLOsraSgiRDDLVgATz0Fr79u12vRwq551VW+Fkd55QnCuVJu61YYNcqSxf79NpX6668XvWF8zx7417+se++nn1op4txzbQ6sM8+0qq6KhRgllZkJ//0vzJ1r2/r1dn6fPrZwlA9ATHyeIJwrI1atgpkzrfG6MF/ghbF6Nbz4oi3wtHat7UtKguOPt8by0Na0qc3Su3x5TkJYty7nOs2bWztKerqNwTjmGOuN1aeP9bI64YToxBsuK8t6ma1daw3+ycnWVblxY5uXK6/qs3377LNcvjxn27/f4v3FL+x9lBeeIJxzBcrOtq69S5bYF3/ubd8+O07EBhR27Ghbhw62hRq+d+2C6dNt2dmPPrIEBFY11rOnJZqUlMO32rWPjGXbNlu/PDMzZ1u3zpLB//5nt+vX5z0+pXp1S3KNG9tt7doWy/Lldm52ds6x9evbbWam3bZrZ4miPJSEPEE454pF1b48N22ykkKNGoU/b8WKnGQxZ45dI7eaNS1RJCVZUtiyJfIXf1KSHZeaaokmNTXn/vHHWy+yH36wxLF+/eH3t2+32Fu1soGQrVrl3E9OtoQxf77FOmWKdWnOyrKSUO/etk7JZZdZrNGSlWXJdO5cuPhii6WkeYJwziWM/fvtizsj4/Bt3TpLCg0a2C/63Leh+9GqWitIeEno44+tSqp6dRg0yHqAnXlm0XqAHTxoAzBDc4GFSi0iNoHkbbdZB4SS6l3mCcI554pB1WYFfuEFm5pl1y77tX/NNdYDrFGj/M/PzrYldd94A95+29pLqleHX/7SSiUdOsD48fD005Yw2rWDYcNg8ODijdAvDE8QzjkXJT/9ZF/y48ZZh4GkJJsyvmVL2L078paZCZs325d9v36WFPr3t+qrcHv32hiXxx+3xbEaNLApU264warQYsEThHPOxcD339sv/1desTaOGjUib7VqWTvGgAGFa8NQhWnT4LHHbMQ8WLI45RRo3TpnO+UU63FVnOqouCUIEekD/ANIAp5X1YdyPT8UeBRYH+x6UlWfF5H2wNNALeAgMEpV38jvtTxBOOfKomXL4L33YOlS25YssXm2QpKTrcdV+BruRyMuS46KSBIwFjgPyABmi8hkVV2S69A3VPXmXPv2AFeq6vcicjwwR0SmqOr2WMXrnHOJ6KSTbAtRtTaMULJYsiR2c2vFsj9AF2CFqq4CEJGJwEAgd4I4gqouD7v/g4j8CNQHPEE458o1EWuPOP54OOec2L5WLBcMagyEjbMkI9iX2yUiskBE3haRJrmfFJEuQGVgZYTnbhCRdBFJzwz1FXPOORcV8V5R7j2gmaq2BT4BXgx/UkQaAS8DV6tqdu6TVfVZVU1T1bT6oaGQzjnnoiKWCWI9EF4iSCGnMRoAVd2iqsEAfp4HOoWeE5FawAfAPar6dQzjdM45F0EsE8RsoKWINBeRysBgYHL4AUEJIWQAsDTYXxn4F/CSqr4dwxidc87lIWaN1KqaJSI3A1Owbq7jVHWxiIwE0lV1MnCriAwAsoCtwNDg9EFAT+DYoCsswFBVnRereJ1zzh3OB8o551w5lt84iHg3UjvnnEtQniCcc85FVGaqmEQkE1hbjEvUAzZHKZxo89iKxmMrGo+taEprbKmqGnGcQJlJEMUlIul51cPFm8dWNB5b0XhsRVMWY/MqJueccxF5gnDOOReRJ4gcz8Y7gHx4bEXjsRWNx1Y0ZS42b4NwzjkXkZcgnHPOReQJwjnnXETlPkGISB8RWSYiK0RkeLzjCScia0RkoYjME5G4zyMiIuNE5EcRWRS2r66IfCIi3we3MVrb6qjjul9E1gef3TwR6VfScQVxNBGR6SKyREQWi8gfgv2J8LnlFVvcPzsRqSoi34rI/CC2vwT7m4vIN8Hf6xvBxJ6JEtsEEVkd9rm1L+nYwmJMEpH/isj7weOifW6qWm43bBLBlUALbFGi+UDreMcVFt8aoF684wiLpyfQEVgUtu8RYHhwfzjwcILEdT9wRwJ8Zo2AjsH9msByoHWCfG55xRb3zw4QoEZwvxLwDXA68CYwONj/DHBTAsU2Abg03v/ngrhuB14D3g8eF+lzK+8liEPLoqrqfiC0LKqLQFVnYrPuhhtIzkJPLwIXlmhQ5BlXQlDVDao6N7i/C5vSvjGJ8bnlFVvcqdkdPKwUbAqcDYSWAIjX55ZXbAlBRFKA/tgaO4iIUMTPrbwniMIuixovCkwVkTkickO8g8lDQ1XdENzfCDSMZzC53BwsZzsuHlU4uYlIM6AD9oszoT63XLFBAnx2QTXJPOBHbMXJlcB2Vc0KDonb32vu2FQ19LmNCj63x0SkSjxiAx4H/gSEVuE8liJ+buU9QSS6M1W1I9AX+L2I9Ix3QPlRK78myi+pp4ETgPbABuBv8QxGRGoA7wDDVHVn+HPx/twixJYQn52qHlTV9thqlF2Ak+MRRyS5YxOR04C7sRg7A3WBu0o6LhG5APhRVedE43rlPUEUuCxqPKnq+uD2R2yFvS7xjSiiTaGVAYPbH+McDwCquin4I84GniOOn52IVMK+gF9V1XeD3QnxuUWKLZE+uyCe7cB0oBuQLCKhhc7i/vcaFlufoMpO1ZZRHk98PrfuwAARWYNVmZ8N/IMifm7lPUEUuCxqvIjIMSJSM3QfOB9YlP9ZcTEZuCq4fxXw7zjGcogcvpztRcTpswvqf18Alqrq38OeivvnlldsifDZiUh9EUkO7lcDzsPaSKYDlwaHxetzixTbd2EJX7A6/hL/3FT1blVNUdVm2PfZp6p6OUX93OLd2h7vDeiH9d5YCdwT73jC4mqB9aqaDyxOhNiA17EqhwNYPea1WP3mNOB74D9A3QSJ62VgIbAA+zJuFKfP7Eys+mgBMC/Y+iXI55ZXbHH/7IC2wH+DGBYB9wX7WwDfAiuAt4AqCRTbp8Hntgh4haCnU7w24CxyejEV6XPzqTacc85FVN6rmJxzzuXBE4RzzrmIPEE455yLyBOEc865iDxBOOeci8gThHMFEJGDYTN0zpMozvorIs3CZ6F1LpFULPgQ58q9n9WmVXCuXPEShHNFJLZexyNia3Z8KyInBvubicinwaRt00SkabC/oYj8K1hHYL6InBFcKklEngvWFpgajM5FRG4N1mpYICIT4/Q2XTnmCcK5glXLVcV0WdhzO1S1DfAkNosmwBPAi6raFngVGBPsHwPMUNV22PoVi4P9LYGxqnoqsB24JNg/HOgQXOfGWL055/LiI6mdK4CI7FbVGhH2rwHOVtVVwaR3G1X1WBHZjE1PcSDYv0FV64lIJpCiNplb6BrNsOmiWwaP7wIqqepfReRjYDcwCZikOWsQOFcivAThXPFoHvePxr6w+wfJaRvsD4zFShuzw2bjdK5EeIJwrnguC7v9Krj/JTaTJsDlwKzg/jTgJji04EztvC4qIhWAJqo6HVtXoDZwRCnGuVjyXyTOFaxasHpYyMeqGurqWkdEFmClgCHBvluA8SJyJ5AJXB3s/wPwrIhci5UUbsJmoY0kCXglSCICjFFbe8C5EuNtEM4VUdAGkaaqm+Mdi3Ox4FVMzjnnIvIShHPOuYi8BOGccy4iTxDOOeci8gThnHMuIk8QzjnnIvIE4ZxzLqL/D5REPGoqrcRXAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"7_LZcwQp0cE_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592932443379,"user_tz":-330,"elapsed":1599,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"e46864ca-79c0-40c8-e463-701de0547f9a"},"source":["score = model.evaluate(test_seq, y_test, batch_size=64)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["6/6 [==============================] - 0s 19ms/step - loss: 0.5101 - accuracy: 0.7660\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"IVvphgLMz6Bn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1592909719794,"user_tz":-330,"elapsed":5312,"user":{"displayName":"Akshay Kumar Chaurasia","photoUrl":"","userId":"12809313259391379905"}},"outputId":"53a89e94-b9d9-40f2-e22e-8d722f9434f1"},"source":["model.save('/content/drive/My Drive/model7473')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["INFO:tensorflow:Assets written to: /content/drive/My Drive/model7473/assets\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"vhArNjNX0cRr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":402},"executionInfo":{"status":"error","timestamp":1592909534499,"user_tz":-330,"elapsed":1495,"user":{"displayName":"Akshay Kumar Chaurasia","photoUrl":"","userId":"12809313259391379905"}},"outputId":"28d7f6f2-dc4e-4475-b3c1-7a4d87ec5cd5"},"source":["print(\"ACCURACY:\",score[1])\n","print(\"LOSS:\",score[0])\n","predictions  = model.predict_classes('i love mangoes')\n","print(predictions)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["ACCURACY: 0.7883008122444153\n","LOSS: 0.4633887708187103\n"],"name":"stdout"},{"output_type":"error","ename":"IndexError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-195-ec8035605117>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"ACCURACY:\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"LOSS:\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mscore\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mpredictions\u001b[0m  \u001b[0;34m=\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict_classes\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'i love mangoes'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/util/deprecation.py\u001b[0m in \u001b[0;36mnew_func\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    322\u001b[0m               \u001b[0;34m'in a future version'\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mdate\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'after %s'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0mdate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    323\u001b[0m               instructions)\n\u001b[0;32m--> 324\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    325\u001b[0m     return tf_decorator.make_decorator(\n\u001b[1;32m    326\u001b[0m         \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_func\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'deprecated'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/sequential.py\u001b[0m in \u001b[0;36mpredict_classes\u001b[0;34m(self, x, batch_size, verbose)\u001b[0m\n\u001b[1;32m    357\u001b[0m         \u001b[0mA\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0marray\u001b[0m \u001b[0mof\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    358\u001b[0m     \"\"\"\n\u001b[0;32m--> 359\u001b[0;31m     \u001b[0mproba\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mverbose\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    360\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mproba\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    361\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mproba\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36m_method_wrapper\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     86\u001b[0m       raise ValueError('{} is not supported in multi-worker mode.'.format(\n\u001b[1;32m     87\u001b[0m           method.__name__))\n\u001b[0;32m---> 88\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     89\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m   return tf_decorator.make_decorator(\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/training.py\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x, batch_size, verbose, steps, callbacks, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1247\u001b[0m           \u001b[0mworkers\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mworkers\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1248\u001b[0m           \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1249\u001b[0;31m           model=self)\n\u001b[0m\u001b[1;32m   1250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1251\u001b[0m       \u001b[0;31m# Container that configures and calls `tf.keras.Callback`s.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/data_adapter.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, x, y, sample_weight, batch_size, steps_per_epoch, initial_epoch, epochs, shuffle, class_weight, max_queue_size, workers, use_multiprocessing, model)\u001b[0m\n\u001b[1;32m   1110\u001b[0m         \u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0muse_multiprocessing\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1111\u001b[0m         \u001b[0mdistribution_strategy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mds_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_strategy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1112\u001b[0;31m         model=model)\n\u001b[0m\u001b[1;32m   1113\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1114\u001b[0m     \u001b[0mstrategy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mds_context\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_strategy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/data_adapter.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, x, y, sample_weights, sample_weight_modes, batch_size, shuffle, **kwargs)\u001b[0m\n\u001b[1;32m    655\u001b[0m         \u001b[0mbatch_size\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    656\u001b[0m         \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshuffle\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 657\u001b[0;31m         **kwargs)\n\u001b[0m\u001b[1;32m    658\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    659\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mget_dataset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/data_adapter.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, x, y, sample_weights, sample_weight_modes, batch_size, epochs, steps, shuffle, **kwargs)\u001b[0m\n\u001b[1;32m    273\u001b[0m     \u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpack_x_y_sample_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 275\u001b[0;31m     \u001b[0mnum_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    276\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_samples\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    277\u001b[0m       \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Data cardinality is ambiguous:\\n\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/keras/engine/data_adapter.py\u001b[0m in \u001b[0;36m<genexpr>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    273\u001b[0m     \u001b[0minputs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpack_x_y_sample_weight\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msample_weights\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    274\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 275\u001b[0;31m     \u001b[0mnum_samples\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnest\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mflatten\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    276\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnum_samples\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    277\u001b[0m       \u001b[0mmsg\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Data cardinality is ambiguous:\\n\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/tensor_shape.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    868\u001b[0m       \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    869\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_v2_behavior\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 870\u001b[0;31m           \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dims\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    871\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    872\u001b[0m           \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dims\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mIndexError\u001b[0m: list index out of range"]}]},{"cell_type":"code","metadata":{"id":"SVrG5MT40cbp","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KoVPB5X_scTA","colab_type":"code","colab":{}},"source":["def decode_sentiment(score, include_neutral=True):\n","    if score <= 0.4:\n","        label = NEGATIVE\n","    elif score >= 0.7:\n","        label = POSITIVE\n","\n","    return label\n","    "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_9gj85hkscaq","colab_type":"code","colab":{}},"source":["def predict(text, include_neutral=True):\n","    # Tokenize text\n","    x_test = pad_sequences(tokenizer.texts_to_sequences([text]), maxlen=100)\n","    # Predict\n","    score = model.predict([x_test])[0]\n","    # Decode sentiment\n","    label = decode_sentiment(score, include_neutral=include_neutral)\n","\n","    return {\"label\": label, \"score\": float(score)}"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"HoaVbNEzscg6","colab_type":"code","colab":{}},"source":["predict('i love mangoes')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"01uWKT80scnU","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":122},"executionInfo":{"status":"ok","timestamp":1592932877135,"user_tz":-330,"elapsed":1589,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"080cb9a9-fa5a-483f-fe15-af92e19b624c"},"source":["twt = ['i like the way you smile']\n","twt = tokenizer.texts_to_sequences(twt)\n","\n","twt = padded = pad_sequences(twt, maxlen=50, padding = padding_type, truncating=trunc_type)\n","print(twt)\n","sentiment = model.predict(twt,batch_size=1,verbose = 2)[0]\n","ans = np.around(sentiment)\n","print(sentiment)\n","if ans ==1:\n","  print('positive')\n","else:\n","  print('negative')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[[  2   8 109  73  29 485   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0   0   0   0   0]]\n","1/1 - 0s\n","[0.5450236]\n","positive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"2KvqYHsBsctN","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":210},"executionInfo":{"status":"ok","timestamp":1592990904879,"user_tz":-330,"elapsed":4361,"user":{"displayName":"Alex Alex","photoUrl":"","userId":"05018959079896522842"}},"outputId":"a3110a98-eb4c-4c41-8669-b91b4de56dde"},"source":["#django \n","twt = 'this product is terrible'\n","\n","import re\n","import string\n","import pickle\n","import numpy as np\n","\n","import tensorflow as tf\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","import nltk\n","from  nltk.stem import SnowballStemmer\n","stemmer = SnowballStemmer(\"english\")\n","\n","embedding_dim = 100\n","max_length = 100\n","trunc_type='post'\n","padding_type='post'\n","oov_tok = \"<OOV>\"\n","stop_words = ['list of stop words'] # i'll provide this\n","\n","def strip_links(text):\n","    link_regex    = re.compile('((https?):((//)|(\\\\\\\\))+([\\w\\d:#@%/;$()~_?\\+-=\\\\\\.&](#!)?)*)', re.DOTALL)\n","    links         = re.findall(link_regex, text)\n","    for link in links:\n","        text = text.replace(link[0], ', ')    \n","    return text\n","\n","def strip_all_entities(text):\n","    entity_prefixes = ['@','#']\n","    for separator in  string.punctuation:\n","        if separator not in entity_prefixes :\n","            text = text.replace(separator,' ')\n","    words = []\n","    for word in text.split():\n","        word = word.strip()\n","        if word:\n","            if word[0] not in entity_prefixes:\n","                words.append(word)\n","    return ' '.join(words)\n","\n","def preprocess(line):\n","    line = line.lower()\n","    #stopwords removal\n","    for word in stop_words:\n","      token = \" \" + word + \" \"\n","      line = line.replace(token, \" \")\n","      line = line.replace(\"  \", \" \")\n","    #stemming   \n","    tokens = []\n","    for token in line.split():\n","      tokens.append(stemmer.stem(token))\n","    return \" \".join(tokens)\n","\n","twt = strip_links(twt)    #optional\n","twt = strip_all_entities(twt)  #optional (it removes @username #name)\n","twt = preprocess(twt)\n","print(\"data: \",twt)\n","ls = []\n","ls.append(twt)\n","print(\"arry: \", ls)\n","tokenizer= Tokenizer(oov_token=oov_tok)\n","tokenizer = pickle.load(open(\"/content/drive/My Drive/sentiment analysis/tokenizer.p\", \"rb\"))\n","#word_index = pickle.load(open(\"/content/drive/My Drive/sentiment analysis/wordindex.p\", \"rb\"))\n","#vocab_size = len(word_index)\n","model = tf.keras.models.load_model('/content/drive/My Drive/sentiment analysis/fullmodel7374')\n","\n","twt = tokenizer.texts_to_sequences(ls)\n","twt = pad_sequences(twt, maxlen=max_length, padding = padding_type, truncating=trunc_type)\n","\n","print(twt)\n","sentiment = model.predict(twt,batch_size=1,verbose = 2)[0]\n","ans = np.around(sentiment)\n","print(sentiment)\n","if ans ==1:\n","  print('positive')\n","else:\n","  print('negative')"],"execution_count":17,"outputs":[{"output_type":"stream","text":["data:  this product is terribl\n","arry:  ['this product is terribl']\n","[[220 868  42 813   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0\n","    0   0   0   0   0   0   0   0   0   0]]\n","1/1 - 0s\n","[0.11203884]\n","negative\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"LctJ403BdFsf","colab_type":"text"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"KsL6VY1AdDnw","colab_type":"text"},"source":[""]},{"cell_type":"markdown","metadata":{"id":"EQBPBD3zc_7u","colab_type":"text"},"source":["m"]}]}